zoo = ('питон', 'слон', 'пингвин') # помните, что скобки не обязательны
print('Количество животных в зоопарке -', len(zoo))
#Переменная zoo обозначает кортеж элементов. Как мы видим, функция len
#позволяет получить длину кортежа. Это также указывает на то, что кортеж
#является последовательностью.
new_zoo = 'обезьяна', 'верблюд', zoo
#Теперь мы перемещаем этих животных в новый зоопарк, поскольку старый
#зоопарк закрывается. Поэтому кортеж new_zoo содержит тех животных, ко-
#торые уже там, наряду с привезёнными из старого зоопарка. Возвращаясь к
#реальности, обратите внимание на то, что кортеж внутри кортежа не теряет
#своей индивидуальности.
print('Количество клеток в зоопарке -', len(new_zoo))
print('Все животные в новом зоопарке:', new_zoo)
print('Животные, привезённые из старого зоопарка:', new_zoo[2])
print('Последнее животное, привезённое из старого зоопарка -', new_zoo[2][2])
print('Количество животных в новом зоопарке -', len(new_zoo)-1 + len(new_zoo[2]))
#Доступ к элементам кортежа осуществляется указанием позиции элемента,
#заключённой в квадратные скобки – точно так же, как мы это делали для спис-
#ков. Это называется оператором индексирования. Доступ к третьему элементу
#в new_zoo мы получаем, указывая new_zoo[2], а доступ к третьему элементу
#внутри третьего элемента в кортеже new_zoo – указывая new_zoo[2][2]. Это
#достаточно просто, как только вы поймёте принцип.

#Пустой кортеж создаётся при помощи пустой пары скобок – «myempty = ()». Однако,
#с кортежем из одного элемента не всё так просто. Его нужно указывать при помощи за-
#пятой после первого (и единственного) элемента, чтобы Python мог отличить кортеж от
#скобок, окружающих объект в выражении. Таким образом, чтобы получить кортеж, со-
#держащий элемент 2, вам потребуется указать «singleton = (2,)».